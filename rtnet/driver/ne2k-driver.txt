# ne2k_probe

if ( (reg0 =inb(ioaddr)) == 0xFF )
	goto err_out_free_res;

/* Do a preliminary verification that we have a 8390.			*/
{
	int regd;

	outb(E8390_NODMA+E8390_PAGE1+E8390_STOP, ioaddr + E8390_CMD);
	regd = inb(ioaddr + 0x0d);
	outb(0xff, ioaddr + 0x0d);
	outb(E8390_NODMA+E8390_PAGE0, ioaddr + E8390_CMD);
		
	inb(ioaddr + EN0_COUNTER0); /* Clear the counter by reading.	*/
	if (inb(ioaddr + EN0_COUNTER0) != 0) {
		outb(reg0, ioaddr);
		outb(regd, ioaddr + 0x0d); /* Restore the old values.	*/
		goto err_out_free_res;
	}
}

/* Reset card. Who knows what dain-bramaged state it was left in.	*/
{
	unsigned long reset_start_time = jiffies;

	outb( inb(ioaddr + NE_RESET), ioaddr + NE_RESET);

	/* This looks like a horrible timing loop, but it should never take	*/
	/*  more than a few cycles.						*/

	while ( !(inb (ioaddr + EN0_ISR) & ENISR_RESET) )
	/* Limit wait: '2' avoids jiffy roll-over. 				*/
	if (jiffies - reset_start_time > 2) {
		_ERROR(KERN_ERR PFX "Card failure (no reset ack).\n");
		goto err_out_free_rtnetdev;
	}

	outb(0xff, ioaddr + EN0_ISR); /* Ack all intr.			*/
}

/* Read the 16 bytes of station address PROM.					*/
/* We must first initialize registers, similar to NS8390_init(eifdev, 0).		*/
/* We can't reliably read the SAPROM address without this.				*/
/* (I learned the hard way!).								*/
{
	struct {unsigned char value, offset; } program_seq[] = {
		{E8390_NODMA+E8390_PAGE0+E8390_STOP, E8390_CMD},/* Select page 0	*/
		{0x49,		EN0_DCFG},		/* Set word-wide access.	*/
		{0x00,		EN0_RCNTLO},		/* Clear the count regs.	*/
		{0x00,		EN0_RCNTHI},
		{0x00,		EN0_IMR},		/* Mask completion irq.		*/
		{0xFF,		EN0_ISR},
		{E8390_RXOFF,	EN0_RXCR},		/* 0x20  Set to monitor		*/
		{E8390_TXOFF,	EN0_TXCR},		/* 0x02  and loopback mode.	*/
		{32,		EN0_RCNTLO},
		{0x00,		EN0_RCNTHI},
		{0x00,		EN0_RSARLO},		/* DMA starting at 0x0000.	*/
		{0x00,		EN0_RSARHI},
		{E8390_RREAD+E8390_START, E8390_CMD},
	};
	for (i = 0; i < sizeof (program_seq)/sizeof (program_seq[0]); i++)
	      outb (program_seq[i].value, ioaddr + program_seq[i].offset);
}
