                             RTnet Version 0.6.0

What is it?
-----------
RTnet is real-time UDP/IP protocol stack for RTAI (hard real-time Linux
extension). It provides a standard socket API to be used with RTAI kernel
modules and LXRT processes, see rtnet.h header file for details.

What are the requirements?
--------------------------
- Linux kernel 2.4.x
- RTAI 24.1.x: 24.1.9 or 24.1.11-24.1.13, NEWLXRT when using user space API
  RTAI 3.x: tested on 3.0, LXRT when using user space API
- x86 platform for LXRT extensions, kernel API should also work on other
  platforms (tested on PowerPC)
- RealTek 8139, Intel 8255x (EtherExpress Pro 100), DEC 21x4x-based (tulip),
  AMD PCnet32/PCnetPCI, VIA Rhine, NatSemi DP8381x network adapter, MPC8260
  FCC, or MPC8xx SCC/FEC on-chip controllers

How to install it?
------------------
1. Install and test a suitable RTAI version (see www.rtai.org)
2. cd to a preferred directory (e.g. /usr/src)
3. tar xvjf <PATH-TO-RTNET-ARCHIVE>/rtnet-X.X.X.tar.bz2
4. cd rtnet
5. Run ./configure --with-rtai=<PATH-TO-RTAI> <options> [--prefix=<PREFIX>]
   <PATH-TO-RTAI> is either the source directory of a 24.1.x version or the
   installation directory of a 3.x version. Valid options are a combination of
   the following values:
       --enable-allpci          compiles all PCI NIC drivers
       --enable-8139            compiles the RealTek driver
       --enable-eepro100        compiles the EtherExpress driver
       --enable-pcnet32         compiles the PCnet32 driver
       --enable-tulip           compiles the DEC driver
       --enable-via-rhine       compiles the VIA Rhine driver
       --enable-natsemi         compiles the NatSemi driver
       --enable-fcc-enet        compiles the MPC8260 FCC driver
       --enable-scc-enet        compiles the MPC8xx SCC driver
       --enable-fec-enet        compiles the MPC8xx FEC driver
       --enable-proxy           compiles the IP protocol proxy driver (legacy)
       --disable-loopback       does not compile the loopback driver
       --disable-checks         does not compile internal bug checks
   <PREFIX> is the installation path prefix (see below). Default <PREFIX> is
   /usr/local/rtnet.
6. make
7. make install
   This will create the directories <PREFIX>/sbin with all configuration tools,
   <PREFIX>/modules containing all core modules, and <PREFIX>/include with the
   required API header files.
8. run "mknod /dev/rtnet c 10 240" on your target system to create the
   configuration interface device node.

How to test it?
---------------
1. Shutdown the network device which shall become part of the RT-network and
   remove its driver module (this also means that it must not be compiled
   into the kernel!)
2. Load required RTAI modules
3. Load RTnet and NIC RT-driver module
4. Setup RT-ethernet device and solicit required MAC adresses(rtifconfig)
5. Load application module

For more details see run-scripts in <RTNET-SRC>/examples/round_trip_time

There is also a simple script for loading and unloading RTnet and RTmac. See
<RTNET-SRC>/tools/rtnet. To use it copy rtnet.conf from that directory to
/etc/rtnet.conf and modify it for your system.

How to use RTmac? (a very very short guide!)
-----------------
I assume that rtnet module has been loaded and configured(rtifconfig).
1. Load RTmac with the TDMA discipline:
    # insmod rtmac
    # insmod tdma
   Assumed that your realtime device is rteth0.
2. On client stations:
    # rtifconfig rteth0 mac client
3. On the server station:
    # rtifconfig rteth0 mac master <cycle-time/us> [<mtu-size/byte>]
    # rtifconfig rteth0 mac add <ip_client1>
    # rtifconfig rteth0 mac add <ip_client2>
    # ...
    # rtifconfig rteth0 mac up
    # rtifconfig rteth0 mac offset <ip_client1> <offset/us>
    # rtifconfig rteth0 mac offset <ip_client2> <offset/us>
    # ...
4. Now you can run examples in <RTAI-DIR>/rtnet/rtmac/examples
5. You can furthermore use the associated VNIC (here "vnic0") now.

See Documentation/README.rtmac for more information.

NOTE FOR TDMA: ONLY one-shot timer mode is supported by the current version.


RTnet is free software, and you are welcome to redistribute it under
the terms of the GNU General Public License. This program comes with
ABSOLUTELY NO WARRANTY. See "COPYING" for details.

Contributors:
Ulrich Marx
<marx-at-fet.uni-hannover.de>           - core programming
Nathan Gustavson                        - testing and bug fixing
Marc Kleine-Budde                       - RTmac, testing, bug fixing, autotools
<kleine-budde-at-gmx.de>
Jan Kiszka <jan.kiszka-at-web.de>       - project management, core programming
Wittawat Yamwong <wittawat-at-web.de>   - testing, documents
Hans-Peter Bock <hpbock-at-web.de>      - testing, bug fixing
Mathias Koehrer                         - 3c59x-rt, rtnetproxy, testing,
<mathias_koehrer-at-yahoo.de>             bug fixing, ip fragmentation
Vinay Sridhara                          - ICMP support
<vinaysridhara-at-yahoo.com>
Erwin Rol <erwin-at-muffin.org>         - Ethereal plugin, rtnetproxy
Wolfgang Grandegger                     - MPC drivers
<wg-at-denx.de>
Erik Buit                               - NatSemi driver
<e.buit-at-student.utwente.nl>

Acknowledgements:
David Schleef                           - he wrote the original RTnet, some
                                          parts of this version are based on
                                          his code
