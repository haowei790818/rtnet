                                    RTmac
                                    =====

RTmac is a module designed to be used with RTnet. It provides Media Access
Control(MAC) infrastructure for RTnet. Time Division Multiple Access(TDMA)
is implemented in the current version. Because of modular design of RTmac
you can easily attach your own MAC algorithm suitable for your applications
to RTmac.


RTmac Layer
-----------

* Without RTmac:

           +---------------+
           |RT applications|
           +-------v-------+
                   |
          +--------v---------+
          |  RT UDP/IP stack |
          +------------------+
          |RT ethernet driver|
          +--------v---------+
                   |
              +----v---+
              |   NIC  |
              +--------+

* With RTmac(loaded as module):

           +---------------+
           |RT applications|
           +-------v-------+
                   |
          +--------v---------+
          |  RT UDP/IP stack |
          +------------------+
          |      RTmac       |
          |      Layer       |
          | .--------------. |
          | |MAC algorithm | |
          | `--------------' |
          +------------------+
          |RT ethernet driver|
          +--------v---------+
                   |
              +----v---+
              |   NIC  |
              +--------+

RTmac, if loaded, has the exclusive control over transmission of the network
driver. Every outgoing packets are passed to RTmac and then MAC algorithm will
decide when the packets will be sent to the hardware driver.


TDMA - Time Division Multiple Access
------------------------------------

* TDMA Frames

 |<------------TDMA Frame---------------->|
 |                                        |
 |     |<------synchronous------>| |async-|
 |     |                         | |      |
 .---. .---. .---. .---.     .---. .---.  .---. .---.
 |SOF| |RT0| |RT1| |RT2| ... |RTn| |NRT|  |SOF| |RT0|
 '---' '---' '---' '---'     '---' '---'  '---' '---'
 |                                     |  |
 |                ..................../   |
 |               / ....................../            
 |              / /              
 +-------------+  +-------------+
 |    cycle    |  |    cycle    | ...
 |      1      |  |      2      |
 +-------------+  +-------------+
 ========================================================> time

  SOF		Start Of Frame sent by the master
  RT0		Realtime paket from the master
  RT1..RTn	Realtime paket from client #1..n
  NRT		Nonrealtime slot

 .---. .---. .---. .---.     .---. .---.  .---. .---.
 |SOF| |RT0| |RT1| |RT2| ... |RTn| |NRT|  |SOF| |RT0|
 |---' '---' |---' |---'     |---' '---'  '---' '---'
 |-offset 1->|     |         |
 |---offset 2----->|         |
 |-------offset n----------->|


A station in the realtime network can have one of the 3 basic states: Idle,
Master and Client. Every stations are in Idle state direct after RTmac was
loaded. You can configure any station as master. As soon as one master is
active the others can only be client.

The whole configuration are done on the master station.

1. Change from Idle to Master state.

2. Register all clients. Before you can use the network you have to register
   all clients in your network. NOTE: You cannot register clients at
   runtime.

3. Set the cycle time. Master will generate at the beginning of every cycles
   the Start Of Frame. NOTE: The cycle time cannot be change at runtime

4. Set the packet size.

5. Set the sender offset for every clients. It is the time between reception
   of SOF and the begin of client time slot. (see above)


Sample RTmac/TDMA session
---------------------------
Assumption:
3 stations, eth0 is realtime network device
10.0.0.1 is master, cycle time = 10ms
10.0.0.2 is client #1, offset = 1ms
10.0.0.3 is client #2, offset = 2ms

0. Setup RTnet as usual. (Don't forget to do ARP)

1. Load module rtmac
	# modprobe rtmac dev=eth0

2. On the master station:

   2.1 Change to Master state
	# rtifconfig eth0 mac master 10000

   2.2 Register all client stations
	# rtifconfig eth0 mac add 10.0.0.2
	# rtifconfig eth0 mac add 10.0.0.3
	
   2.3 Start the master
	# rtifconfig eth0 mac up

   2.4 Set sender offset
	# rtifconfig eth0 mac offset 10.0.0.2 1000
	# rtifconfig eth1 mac offset 10.0.0.3 2000

3. The realtime network is ready.

4. To shutdown RTmac
	# rtifconfig eth0 mac down



Reference
---------
[1] Kleine-Budde, Marc;
    Entwurf und Implementierung eines echtzeitfähigen Protokolls 
    zur Steuerung des Medienzugriffs auf das Ethernet,
    Institut für Systems Engineering,
    Fachgebiet Echtzeitsysteme,
    Universität Hannover,
    Januar 2003
    