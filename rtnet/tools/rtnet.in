#!/bin/sh
#
# script for loading/unloading RTnet, RTmac/TMDA, and RTcap
#

usage() {
    cat << EOF
Usage:
    $0 [-cf <config-file>] {start|stop}
        Start or stop station according to configuration file

    $0 [-cf <config-file>] master <slave_ip1> [<slave_ip2> ...]
        Start station as master for given list of slaves

    $0 [-cf <config-file>] capture
        Start only passive realtime capturing
EOF
}

init_rtnet() {
    insmod $RTNET_MOD/rtnet$MODULE_EXT >/dev/null || exit 1
    insmod $RTNET_MOD/$RT_DRIVER$MODULE_EXT $RT_DRIVER_OPTIONS >/dev/null || exit 1

    if [ $RT_LOOPBACK = "yes" ]; then
        insmod $RTNET_MOD/rt_loopback$MODULE_EXT >/dev/null || exit 1
    fi

    if [ $RTCAP = "yes" ]; then
        insmod $RTNET_MOD/rtcap$MODULE_EXT >/dev/null || exit 1
    fi

    if [ $RT_LOOPBACK = "yes" ]; then
        $RTIFCONFIG rtlo up 127.0.0.1
    fi

    if [ $RTCAP = "yes" ]; then
        ifconfig rteth0 up
        ifconfig rteth0-mac up
        if [ $RT_LOOPBACK = "yes" ]; then
            ifconfig rtlo up
        fi
    fi

    insmod $RTNET_MOD/rtcfg$MODULE_EXT >/dev/null
    insmod $RTNET_MOD/rtmac$MODULE_EXT >/dev/null
    insmod $RTNET_MOD/tdma$MODULE_EXT >/dev/null
}

submit_cfg() {
    case "$STATION_TYPE" in
        master)
            $RTIFCONFIG rteth0 up $IPADDR $NETMASK_OPT

            $TDMACFG rteth0 master $TDMA_CYCLE
            $TDMA_SLOTS
            ;;
        slave)
            if [ ! "$STATION_IP" = "" ]; then
                if [ ! "$STATION_MAC" = "" ]; then
                    RTCFG_CLIENT="$STATION_IP -hw $STATION_MAC"
                else
                    RTCFG_CLIENT="$STATION_IP"
                fi
            else
                RTCFG_CLIENT="$STATION_MAC"
            fi

            ADD_STAGE1_CMDS="ifconfig vnic0 up $STATION_IP"

            echo "$TDMA_SLOTS$ADD_STAGE1_CMDS" | \
                $RTCFG rteth0 add $RTCFG_CLIENT -stage1 -
            ;;
    esac

    STATION_TYPE=
    STATION_IP=
    STATION_MAC=
    TDMA_SLOTS=
    TDMA_CYCLE=
}

start_master() {
    $RTCFG rteth0 server

    STAGE_2_OPT=
    if [ ! "$STAGE_2_SRC" = "" ]; then
        STAGE_2_OPT="-stage2 $STAGE_2_SRC"
    fi

    if [ ! "$TDMA_SLAVES" = "" ]; then
        # Simple setup:
        #   Sync / Master Slot / + TDMA_OFFSET us / Slave 1 /
        #   + TDMA_OFFSET us / Slave 2 / + TDMA_OFFSET us / ... / Slave n

        $RTIFCONFIG rteth0 up $IPADDR $NETMASK_OPT

        $TDMACFG rteth0 master $TDMA_CYCLE
        $TDMACFG rteth0 slot 0 0

        OFFSET=$TDMA_OFFSET
        for SLAVE in $TDMA_SLAVES; do
            echo "$SLAVE_TDMACFG rteth0 slot 0 $OFFSET;" \
                "ifconfig vnic0 up \$IPADDR \$NETMASK_OPT" | \
                $RTCFG rteth0 add $SLAVE -stage1 - $STAGE_2_OPT
            let OFFSET=$OFFSET+$TDMA_OFFSET
        done
    else
        # Get setup from TDMA_CONFIG file:
        #
        # master:
        # cycle <cycle_in_us>
        #
        # slave:
        # ip 1.2.3.4
        # mac AA:BB:CC:DD:EE:FF
        # slot <id> <offset_in_us> [<phasing>/<period> [<size>]]
        # slot ...
        #
        # slave:
        # ip 1.2.3.4
        # slot ...
        #
        # slave:
        # mac AA:BB:CC:DD:EE:FF
        # slot ...
        #

        if [ ! -r $TDMA_CONFIG ]; then
            echo "Could not read $TDMA_CONFIG"
            exit 1
        fi

        while read ARG1 ARG2 ARG3 ARG4 ARG5; do
            case "$ARG1" in
                "master:")
                    submit_cfg
                    STATION_TYPE=master
                    ;;
                "cycle")
                    TDMA_CYCLE="$ARG2"
                    ;;
                "slave:")
                    submit_cfg
                    STATION_TYPE=slave
                    ;;
                "ip")
                    STATION_IP="$ARG2"
                    ;;
                "mac")
                    STATION_MAC="$ARG2"
                    ;;
                "slot")
                    if [ "$STATION_TYPE" = "slave" ]; then
                        TDMA_SLOTS="$TDMA_SLOTS$SLAVE_TDMACFG rteth0 slot $ARG2 $ARG3"
                    else
                        TDMA_SLOTS="$TDMA_SLOTS $TDMACFG rteth0 slot $ARG2 $ARG3"
                    fi
                    if [ ! "$ARG4" = "" ]; then
                        TDMA_SLOTS="$TDMA_SLOTS -p $ARG4"
                    fi
                    if [ ! "$ARG5" = "" ]; then
                        TDMA_SLOTS="$TDMA_SLOTS -s $ARG5"
                    fi
                    TDMA_SLOTS="$TDMA_SLOTS;"
                    ;;
            esac
        done < $TDMA_CONFIG
        submit_cfg
    fi

    ifconfig vnic0 up $IPADDR $NETMASK_OPT

    echo -n "Waiting for all slaves..."
    $RTCFG rteth0 ready
    echo
}


prefix="@prefix@"
RTNETCFG="@sysconfdir@/rtnet.conf"

if [ "$1" = "-cf" ]; then
    RTNETCFG="$2"
    shift 2
fi

if [ -r $RTNETCFG ]; then
    . $RTNETCFG
else
    echo "Could not read $RTNETCFG"
    exit 1
fi

NETMASK_OPT=
if [ ! "$NETMASK" = "" ]; then
    NETMASK_OPT="netmask $NETMASK"
fi


case "$1" in
    start)
        init_rtnet

        if [ $TDMA_MODE = "master" ]; then
            start_master
        else
            $TDMACFG rteth0 slave

            $RTIFCONFIG rteth0 up $IPADDR $NETMASK_OPT

            echo -n "Stage 1: searching for master..."
            sh -c `echo; $RTCFG rteth0 client -c`

            echo -n "Stage 2: waiting for other slaves..."
            if [ ! "$STAGE_2_DST" = "" ]; then
                $RTCFG rteth0 announce -f $STAGE_2_DST
                echo
                /bin/sh -c "$STAGE_2_CMDS"
            else
                $RTCFG rteth0 announce
                echo
            fi

            echo -n "Stage 3: waiting for common setup completion..."
            $RTCFG rteth0 ready
            echo
        fi
        ;;

    stop)
        ifconfig vnic0 down 2>/dev/null
        ifconfig rteth0 down 2>/dev/null
        ifconfig rteth0-mac down 2>/dev/null
        ifconfig rtlo down 2>/dev/null

        $RTIFCONFIG rteth0 down
        $RTIFCONFIG rtlo down 2>/dev/null

        rmmod tdma rtmac rtcfg rtcap rt_loopback $RT_DRIVER rtnet 2>/dev/null
        ;;

    master)
        shift
        init_rtnet
        TDMA_SLAVES=$*
        start_master
        ;;

    capture)
        insmod $RTNET_MOD/rtnet$MODULE_EXT >/dev/null || exit 1
        insmod $RTNET_MOD/$RT_DRIVER$MODULE_EXT $RT_DRIVER_OPTIONS >/dev/null || exit 1
        insmod $RTNET_MOD/rtcap$MODULE_EXT start_timer=1 >/dev/null || exit 1
        $RTIFCONFIG rteth0 up promisc
        ifconfig rteth0 up
        ifconfig rteth0-mac up
        ;;

    *)
        usage
        exit 1
esac

exit 0
